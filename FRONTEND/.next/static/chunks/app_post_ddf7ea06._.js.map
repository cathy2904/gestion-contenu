{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/komba/Gestion-contenu/FRONTEND/app/post/service/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:3003/api',\r\n});\r\n\r\nexport const getPosts = () => api.get('/posts');\r\nexport const getPost = (id: string) => api.get(`/posts/${id}`);\r\nexport const createPost = (postData: any) => api.post('/posts', postData);\r\nexport const updatePost = (id: string, postData: any) => api.put(`/posts/${id}`, postData);\r\nexport const deletePost = (id: string) => api.delete(`/posts/${id}`);"],"names":[],"mappings":";;;;;;;AAAA;;AAEA,MAAM,MAAM,wIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACvB,SAAS;AACX;AAEO,MAAM,WAAW,IAAM,IAAI,GAAG,CAAC;AAC/B,MAAM,UAAU,CAAC,KAAe,IAAI,GAAG,CAAC,CAAC,OAAO,EAAE,IAAI;AACtD,MAAM,aAAa,CAAC,WAAkB,IAAI,IAAI,CAAC,UAAU;AACzD,MAAM,aAAa,CAAC,IAAY,WAAkB,IAAI,GAAG,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE;AAC1E,MAAM,aAAa,CAAC,KAAe,IAAI,MAAM,CAAC,CAAC,OAAO,EAAE,IAAI","debugId":null}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/komba/Gestion-contenu/FRONTEND/app/post/page.tsx"],"sourcesContent":["// Date: 2025-03-26\n'use client';\nimport { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport React from 'react';\nimport { getPosts, deletePost } from '../post/service/api';\nimport PostTable from '../components/PostTable';\n\n\n\nexport default function PostsPage() {\n  const [posts, setPosts] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchPosts = async () => {\n    try {\n      setIsLoading(true);\n      const response = await getPosts();\n      setPosts(response.data);\n    } catch (err) {\n      setError('Erreur lors du chargement des posts');\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    try {\n      await deletePost(id);\n      setPosts(posts.filter(post => post._id !== id));\n    } catch (err) {\n      setError('Erreur lors de la suppression du post');\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  if (isLoading) return <div className=\"text-center py-8\">Chargement...</div>;\n  if (error) return <div className=\"text-center py-8 text-red-500\">{error}</div>;\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-2xl font-bold\">Liste des Posts</h1>\n        <Link href=\"/posts/create\">\n          <button className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded\">\n            Créer un nouveau post\n          </button>\n        </Link>\n      </div>\n\n      {posts.length === 0 ? (\n        <div className=\"text-center py-8 text-gray-500\">Aucun post disponible</div>\n      ) : (\n        <PostTable posts={posts} onDelete={handleDelete} />\n      )}\n    </div>\n  );\n}\n\n\n\n\n\n\n// \"use client\";\n// import React,{useEffect, useState} from \"react\";\n// import useSWR from \"swr\";\n// import Post from \"../components/Post\";\n// import { PostModel } from \"../types\";\n// import Link from \"next/link\";\n// import { fetcher } from \"../libs\";\n// export default function Posts() {\n//   const [posts,setPosts] = useState<PostModel[]>([]);\n//   const { data, error, isLoading } = useSWR<any>(`/api/posts`, fetcher);\n//   useEffect(() => {\n//     const fetchPosts = async () => {\n//       try {\n//         console.log('Début du fetch...');\n//         const response = await fetch('/api/posts');\n//         console.log('Réponse reçue:', response);\n        \n//         const data = await response.json();\n//         console.log('Données reçues:', data);\n        \n//         setPosts(data);\n//       } catch (error) {\n//         console.error('Erreur complète:', error);\n//       }\n//     };\n//     fetchPosts();\n//   }, []);\n\n\n//   let delete_Post : PostModel['deletePost']= async (id:number) => {\n//     const res = await fetch(`/api/posts/${id}`, {\n//       method: 'DELETE',\n//       headers: {\n//         'Content-Type': 'application/json'\n//       },\n//     });\n//     const content = await res.json();\n//     if(content.success>0)\n//     {\n       \n//       setPosts(posts?.filter((post:PostModel)=>{  return post.id !== id  }));\n//     }\n//   }\n//   return (\n//     <div className=\"w-full max-w-7xl m-auto\">\n//       <div>\n//     <Link href={`/post/create`} className=\"bg-green-500 p-2 inline-block text-white\">Créer</Link>\n\n//     </div>\n//       <table className=\"w-full border-collapse border border-slate-400\">\n//         {/* <caption className=\"caption-top py-5 font-bold text-green-500 text-2xl\">\n//           List Posts - Counter :\n//           <span className=\"text-red-500 font-bold\">{ posts?.length}</span>\n//         </caption> */}\n    \n//         <thead>\n//           <tr className=\"text-center\">\n            \n//             <th className=\"border border-slate-300\">Title</th>\n//             <th className=\"border border-slate-300\">contenu</th>\n//             <th className=\"border border-slate-300\">auteur</th>\n//             <th className=\"border border-slate-300\">Modify</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//            {/* <tr>\n//               <td colSpan={5}>\n//                  <Link href={`/post/create`} className=\"bg-green-500 p-2 inline-block text-white\">Créer</Link>\n//               </td>\n//            </tr> */}\n//            {\n//               posts && posts.map((item : PostModel)=><Post key={item.id} {...item} deletePost = {delete_Post} />)\n//            }\n\n//             {}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n  \n// }\n"],"names":[],"mappings":"AAAA,mBAAmB;;;;;AAEnB;AACA;AAEA;;;;;;;;AAJA;;;;;AASe,SAAS;;IACtB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAS,EAAE;IAC5C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,MAAM,aAAa;QACjB,IAAI;YACF,aAAa;YACb,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,WAAQ,AAAD;YAC9B,SAAS,SAAS,IAAI;QACxB,EAAE,OAAO,KAAK;YACZ,SAAS;YACT,QAAQ,KAAK,CAAC;QAChB,SAAU;YACR,aAAa;QACf;IACF;IAEA,MAAM,eAAe,OAAO;QAC1B,IAAI;YACF,MAAM,CAAA,GAAA,gIAAA,CAAA,aAAU,AAAD,EAAE;YACjB,SAAS,MAAM,MAAM,CAAC,CAAA,OAAQ,KAAK,GAAG,KAAK;QAC7C,EAAE,OAAO,KAAK;YACZ,SAAS;YACT,QAAQ,KAAK,CAAC;QAChB;IACF;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;+BAAE;YACR;QACF;8BAAG,EAAE;IAEL,IAAI,WAAW,qBAAO,6LAAC;QAAI,WAAU;kBAAmB;;;;;;IACxD,IAAI,OAAO,qBAAO,6LAAC;QAAI,WAAU;kBAAiC;;;;;;IAElE,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAqB;;;;;;kCACnC,6LAAC,+JAAA,CAAA,UAAI;wBAAC,MAAK;kCACT,cAAA,6LAAC;4BAAO,WAAU;sCAA+D;;;;;;;;;;;;;;;;;YAMpF,MAAM,MAAM,KAAK,kBAChB,6LAAC;gBAAI,WAAU;0BAAiC;;;;;qCAEhD,6LAAC;gBAAU,OAAO;gBAAO,UAAU;;;;;;;;;;;;AAI3C,EAOA,gBAAgB;CAChB,mDAAmD;CACnD,4BAA4B;CAC5B,yCAAyC;CACzC,wCAAwC;CACxC,gCAAgC;CAChC,qCAAqC;CACrC,oCAAoC;CACpC,wDAAwD;CACxD,2EAA2E;CAC3E,sBAAsB;CACtB,uCAAuC;CACvC,cAAc;CACd,4CAA4C;CAC5C,sDAAsD;CACtD,mDAAmD;CAEnD,8CAA8C;CAC9C,gDAAgD;CAEhD,0BAA0B;CAC1B,0BAA0B;CAC1B,oDAAoD;CACpD,UAAU;CACV,SAAS;CACT,oBAAoB;CACpB,YAAY;CAGZ,sEAAsE;CACtE,oDAAoD;CACpD,0BAA0B;CAC1B,mBAAmB;CACnB,6CAA6C;CAC7C,WAAW;CACX,UAAU;CACV,wCAAwC;CACxC,4BAA4B;CAC5B,QAAQ;CAER,gFAAgF;CAChF,QAAQ;CACR,MAAM;CACN,aAAa;CACb,gDAAgD;CAChD,cAAc;CACd,oGAAoG;CAEpG,aAAa;CACb,2EAA2E;CAC3E,uFAAuF;CACvF,mCAAmC;CACnC,6EAA6E;CAC7E,yBAAyB;CAEzB,kBAAkB;CAClB,yCAAyC;CAEzC,iEAAiE;CACjE,mEAAmE;CACnE,kEAAkE;CAClE,kEAAkE;CAClE,kBAAkB;CAClB,mBAAmB;CACnB,kBAAkB;CAClB,sBAAsB;CACtB,iCAAiC;CACjC,iHAAiH;CACjH,sBAAsB;CACtB,uBAAuB;CACvB,eAAe;CACf,oHAAoH;CACpH,eAAe;CAEf,iBAAiB;CACjB,mBAAmB;CACnB,iBAAiB;CACjB,aAAa;CACb,OAAO;CAEP,IAAI;GA5IoB;KAAA","debugId":null}}]
}