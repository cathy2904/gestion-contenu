{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/komba/Gestion-contenu/FRONTEND/app/contenu/analyze/page.tsx"],"sourcesContent":["'use client';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport axios from 'axios';\r\n\r\ninterface Document {\r\n  _id: string;\r\n  originalName: string;\r\n  fileType: string;\r\n  summary: string;\r\n  createdAt: string;\r\n}\r\n\r\nexport default function Home() {\r\n  const [documents, setDocuments] = useState<Document[]>([]);\r\n  const [selectedDocument, setSelectedDocument] = useState<any>(null);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [uploadProgress, setUploadProgress] = useState<number>(0);\r\n  const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3003';\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    onDrop: acceptedFiles => {\r\n      uploadFile(acceptedFiles[0]);\r\n    },\r\n    accept: {\r\n      'application/pdf': ['.pdf'],\r\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],\r\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx'],\r\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation': ['.pptx'],\r\n      'text/csv': ['.csv'],\r\n      'text/plain': ['.txt']\r\n    },\r\n    maxFiles: 1\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchDocuments();\r\n  }, []);\r\n\r\n  const fetchDocuments = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}api/analyze/documents`);\r\n      setDocuments(response.data);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des documents:', error);\r\n    }\r\n  };\r\n\r\n  const uploadFile = async (file: File) => {\r\n    setLoading(true);\r\n    setUploadProgress(0);\r\n    \r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n      const response = await axios.post(`${API_URL}/analyze/upload`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        },\r\n        onUploadProgress: (progressEvent) => {\r\n          const percentCompleted = Math.round((progressEvent.loaded * 100) / (progressEvent.total || 100));\r\n          setUploadProgress(percentCompleted);\r\n        }\r\n      });\r\n      \r\n      // Ajouter le nouveau document à la liste\r\n      setDocuments(prev => [response.data, ...prev]);\r\n      // Sélectionner le document nouvellement téléchargé\r\n      setSelectedDocument(response.data);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Erreur lors du téléchargement:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const viewDocument = async (id: string) => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/analyze/documents/${id}`);\r\n      setSelectedDocument(response.data);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération du document:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100\">\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <h1 className=\"text-3xl font-bold mb-8 text-center\">Analyseur de Documents avec GPT</h1>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n          {/* Zone de téléchargement */}\r\n          <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n            <h2 className=\"text-xl font-semibold mb-4\">Télécharger un document</h2>\r\n            <div \r\n              {...getRootProps()} \r\n              className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer hover:border-blue-500 transition-colors\"\r\n            >\r\n              <input {...getInputProps()} />\r\n              {loading ? (\r\n                <div>\r\n                  <p>Téléchargement en cours... {uploadProgress}%</p>\r\n                  <div className=\"w-full bg-gray-200 rounded-full h-2.5 mt-2\">\r\n                    <div \r\n                      className=\"bg-blue-600 h-2.5 rounded-full\" \r\n                      style={{ width: `${uploadProgress}%` }}\r\n                    ></div>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <p>Glissez-déposez un fichier ici, ou cliquez pour sélectionner</p>\r\n              )}\r\n            </div>\r\n            <div className=\"mt-2 text-sm text-gray-500\">\r\n              Formats supportés: PDF, DOCX, XLSX, PPTX, CSV, TXT\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Liste des documents */}\r\n          <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n            <h2 className=\"text-xl font-semibold mb-4\">Documents récents</h2>\r\n            {documents.length === 0 ? (\r\n              <p className=\"text-gray-500\">Aucun document téléchargé</p>\r\n            ) : (\r\n              <ul className=\"space-y-2 max-h-96 overflow-y-auto\">\r\n                {documents.map((doc) => (\r\n                  <li \r\n                    key={doc._id} \r\n                    className={`p-3 rounded-md cursor-pointer hover:bg-gray-100 ${\r\n                      selectedDocument?._id === doc._id ? 'bg-blue-50 border border-blue-200' : ''\r\n                    }`}\r\n                    onClick={() => viewDocument(doc._id)}\r\n                  >\r\n                    <div className=\"font-medium\">{doc.originalName}</div>\r\n                    <div className=\"text-sm text-gray-500\">\r\n                      {new Date(doc.createdAt).toLocaleString()} | {doc.fileType.toUpperCase()}\r\n                    </div>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            )}\r\n          </div>\r\n          \r\n          {/* Résumé du document */}\r\n          <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n            <h2 className=\"text-xl font-semibold mb-4\">Résumé GPT</h2>\r\n            {selectedDocument ? (\r\n              <div>\r\n                <h3 className=\"font-medium text-lg\">{selectedDocument.originalName}</h3>\r\n                <div className=\"text-sm text-gray-500 mb-3\">\r\n                  {new Date(selectedDocument.createdAt).toLocaleString()} | {selectedDocument.fileType.toUpperCase()}\r\n                </div>\r\n                <div className=\"bg-gray-50 p-4 rounded-md\">\r\n                  <p className=\"whitespace-pre-wrap\">{selectedDocument.summary}</p>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <p className=\"text-gray-500\">Sélectionnez un document pour voir son résumé</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// 'use client';\r\n// import { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// export default function AnalyzePage() {\r\n//   const [file, setFile] = useState<File | null>(null);\r\n//   const [summary, setSummary] = useState('');\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n\r\n//   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//     if (e.target.files) setFile(e.target.files[0]);\r\n//   };\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (!file) return;\r\n\r\n//     setIsLoading(true);\r\n//     const formData = new FormData();\r\n//     formData.append('file', file);\r\n\r\n//     try {\r\n//       const response = await axios.post(\r\n//         'http://localhost:3003/api/analyze',\r\n//         formData,\r\n//         {\r\n//           headers: { 'Content-Type': 'multipart/form-data' },\r\n//         }\r\n//       );\r\n//       setSummary(response.data.summary);\r\n//     } catch (error) {\r\n//       console.error('Erreur:', error);\r\n//       alert('Échec de l\\'analyse');\r\n//     } finally {\r\n//       setIsLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '2rem' }}>\r\n//       <h1>Analyse de documents</h1>\r\n//       <input\r\n//         type=\"file\"\r\n//         accept=\".txt,.pdf,.docx\"\r\n//         onChange={handleFileChange}\r\n//         style={{ margin: '1rem 0' }}\r\n//       />\r\n//       <button \r\n//         onClick={handleSubmit} \r\n//         disabled={isLoading}\r\n//         style={{ padding: '0.5rem 1rem' }}\r\n//       >\r\n//         {isLoading ? 'Analyse en cours...' : 'Analyser'}\r\n//       </button>\r\n//       {summary && (\r\n//         <div style={{ marginTop: '2rem' }}>\r\n//           <h2>Résumé</h2>\r\n//           <p style={{ whiteSpace: 'pre-line' }}>{summary}</p>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // import UploadAndAnalyze from '@/components/UploadAndAnalyze';\r\n\r\n// // export default function Home() {\r\n// //   return (\r\n// //     <div>\r\n// //       <UploadAndAnalyze />\r\n// //     </div>\r\n// //   );\r\n// // }"],"names":[],"mappings":"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","debugId":null}}]
}