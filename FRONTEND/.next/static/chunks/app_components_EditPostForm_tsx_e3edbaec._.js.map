{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/komba/Gestion-contenu/FRONTEND/app/components/EditPostForm.tsx"],"sourcesContent":["'use client';\r\nimport { useEffect, useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\n\r\nexport default function EditPostForm({ id }: { id: string }) {\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [author, setAuthor] = useState('');\r\n  const [imagePath, setImagePath] = useState('');\r\n  const [newImageFile, setNewImageFile] = useState<File | null>(null);\r\n  const router = useRouter();\r\n\r\n  // Charger les données existantes\r\n  useEffect(() => {\r\n    fetch(`http://localhost:3003/api/posts/${id}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setTitle(data.title);\r\n        setContent(data.content);\r\n        setAuthor(data.author);\r\n        setImagePath(data.imagePath);\r\n      });\r\n  }, [id]);\r\n\r\n  // Upload d'une nouvelle image\r\n  const handleUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    const res = await fetch('http://localhost:3003/api/files/upload', {\r\n      method: 'POST',\r\n      body: formData,\r\n    });\r\n    const data = await res.json();\r\n    setImagePath(data.filePath);\r\n    setNewImageFile(file);\r\n  };\r\n\r\n  // Soumettre la mise à jour\r\n  const handleSubmit = async () => {\r\n    await fetch(`http://localhost:3003/api/posts/${id}`, {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        title,\r\n        content,\r\n        author,\r\n        imagePath, // image mise à jour ou conservée\r\n      }),\r\n    });\r\n\r\n    alert('Post modifié avec succès !');\r\n    router.push('/post');\r\n  };\r\n\r\n  // Supprimer image actuelle\r\n  const handleRemoveImage = () => {\r\n    setImagePath('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Modifier le Post</h2>\r\n\r\n      <input\r\n        type=\"text\"\r\n        value={title}\r\n        onChange={(e) => setTitle(e.target.value)}\r\n        placeholder=\"Titre\"\r\n      />\r\n      <br />\r\n      <textarea\r\n        value={content}\r\n        onChange={(e) => setContent(e.target.value)}\r\n        placeholder=\"Contenu\"\r\n      />\r\n      <br />\r\n      <input\r\n        type=\"text\"\r\n        value={author}\r\n        onChange={(e) => setAuthor(e.target.value)}\r\n        placeholder=\"Auteur\"\r\n      />\r\n      <br />\r\n\r\n      {imagePath && (\r\n        <div>\r\n          <img\r\n            src={`http://localhost:3003${imagePath}`}\r\n            alt=\"Image actuelle\"\r\n            width={200}\r\n          />\r\n          <br />\r\n          <button onClick={handleRemoveImage}>Supprimer l'image</button>\r\n        </div>\r\n      )}\r\n\r\n      <input type=\"file\" onChange={handleUpload} />\r\n      <br />\r\n\r\n      <button onClick={handleSubmit}>Mettre à jour</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n// import { useState, useEffect } from 'react';\r\n\r\n// export default function EditPostForm({ postId }: { postId: string }) {\r\n//   const [post, setPost] = useState<any>(null);\r\n//   const [title, setTitle] = useState('');\r\n//   const [content, setContent] = useState('');\r\n//   const [author, setAuthor] = useState('');\r\n//   const [file, setFile] = useState<File | null>(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchPost = async () => {\r\n//       const res = await fetch(`http://localhost:3003/api/posts/${postId}`);\r\n//       const data = await res.json();\r\n//       setPost(data);\r\n//       setTitle(data.title);\r\n//       setContent(data.content);\r\n//       setAuthor(data.author);\r\n//     };\r\n//     fetchPost();\r\n//   }, [postId]);\r\n\r\n//   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//     if (e.target.files && e.target.files.length > 0) {\r\n//       setFile(e.target.files[0]);\r\n//     }\r\n//   };\r\n\r\n//   const handleUpdate = async () => {\r\n//     const formData = new FormData();\r\n//     formData.append('title', title);\r\n//     formData.append('content', content);\r\n//     formData.append('author', author);\r\n//     if (file) {\r\n//       formData.append('file', file);\r\n//     }\r\n\r\n//     await fetch(`http://localhost:3003/api/posts/${postId}`, {\r\n//       method: 'PUT',\r\n//       body: formData,\r\n//     });\r\n\r\n//     alert('Post updated!');\r\n//   };\r\n\r\n//   if (!post) return <p>Loading...</p>;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Edit Post</h2>\r\n//       <input value={title} onChange={(e) => setTitle(e.target.value)} placeholder=\"Title\" />\r\n//       <textarea value={content} onChange={(e) => setContent(e.target.value)} placeholder=\"Content\" />\r\n//       <input value={author} onChange={(e) => setAuthor(e.target.value)} placeholder=\"Author\" />\r\n//       <input type=\"file\" onChange={handleFileChange} />\r\n//       <button onClick={handleUpdate}>Update Post</button>\r\n//       {post.imagePath && (\r\n//         <div>\r\n//           <p>Current Image:</p>\r\n//           <img src={`http://localhost:3003/api/posts${post.imagePath}`} width=\"200\" />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n// \"use client\";\r\n\r\n// import { useState, useEffect } from \"react\";\r\n// import { useRouter } from \"next/navigation\";\r\n\r\n// interface EditPostFormProps {\r\n//   post: any;\r\n// }\r\n\r\n// export default function EditPostForm({ post }: EditPostFormProps) {\r\n//   const router = useRouter();\r\n//   const [title, setTitle] = useState(post.title);\r\n//   const [content, setContent] = useState(post.content);\r\n//   const [image, setImage] = useState<File | null>(null);\r\n\r\n//   const handleSubmit = async (e: React.FormEvent) => {\r\n//     e.preventDefault();\r\n\r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title);\r\n//     formData.append(\"content\", content);\r\n//     if (image) formData.append(\"image\", image);\r\n\r\n//     const response = await fetch(`http://localhost:3003/api/posts/${post._id}`, {\r\n//       method: \"PATCH\",\r\n//       body: formData,\r\n//     });\r\n\r\n//     if (response.ok) {\r\n//       router.push(\"/posts\");\r\n//     } else {\r\n//       console.error(\"Échec de la modification\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <form onSubmit={handleSubmit} className=\"flex flex-col gap-4 max-w-xl mx-auto\">\r\n//       <h2 className=\"text-xl font-semibold\">Modifier un article</h2>\r\n\r\n//       <input\r\n//         type=\"text\"\r\n//         value={title}\r\n//         onChange={(e) => setTitle(e.target.value)}\r\n//         placeholder=\"Titre\"\r\n//         className=\"border p-2 rounded\"\r\n//       />\r\n\r\n//       <textarea\r\n//         value={content}\r\n//         onChange={(e) => setContent(e.target.value)}\r\n//         placeholder=\"Contenu\"\r\n//         className=\"border p-2 rounded\"\r\n//       />\r\n\r\n//       <input\r\n//         type=\"file\"\r\n//         accept=\"image/*\"\r\n//         onChange={(e) => setImage(e.target.files?.[0] || null)}\r\n//         className=\"border p-2 rounded\"\r\n//       />\r\n\r\n//       <button type=\"submit\" className=\"bg-blue-600 text-white py-2 px-4 rounded\">\r\n//         Enregistrer les modifications\r\n//       </button>\r\n//     </form>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n// import { useForm } from 'react-hook-form';\r\n// import { useState } from 'react';\r\n\r\n// interface EditPostFormProps {\r\n//   onSubmit: (data: FormData) => void;\r\n//   initialData: {\r\n//     title: string;\r\n//     content: string;\r\n//     author: string;\r\n//     imagePath?: string;\r\n//   };\r\n//   isSubmitting?: boolean;\r\n// }\r\n\r\n// export default function EditPostForm({ onSubmit, initialData, isSubmitting = false }: EditPostFormProps) {\r\n//   const { register, handleSubmit, formState: { errors } } = useForm({\r\n//     defaultValues: { ...initialData, image: null },\r\n//   });\r\n//   const [previewImage, setPreviewImage] = useState<string | null>(null);\r\n\r\n//   const handleFormSubmit = async (data: any) => {\r\n//     const formData = new FormData();\r\n//     formData.append('title', data.title);\r\n//     formData.append('content', data.content);\r\n//     formData.append('author', data.author);\r\n\r\n//     if (data.image && data.image[0]) {\r\n//       // Append the new image if it exists\r\n//       formData.append('image', data.image[0]);\r\n//     } else if (initialData.imagePath) {\r\n//       // Retain the existing image path if no new image is uploaded\r\n//       formData.append('imagePath', initialData.imagePath);\r\n//     }\r\n\r\n//     onSubmit(formData);\r\n//   };\r\n\r\n//   const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//     const file = e.target.files?.[0];\r\n//     if (file) {\r\n//       const reader = new FileReader();\r\n//       reader.onloadend = () => {\r\n//         setPreviewImage(reader.result as string);\r\n//       };\r\n//       reader.readAsDataURL(file);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-4 max-w-2xl mx-auto\">\r\n//       <div>\r\n//         <label className=\"block text-sm font-medium text-gray-700\">Titre *</label>\r\n//         <input\r\n//           {...register('title', { required: 'Le titre est requis' })}\r\n//           className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 ${\r\n//             errors.title ? 'border-red-500' : 'border'\r\n//           } p-2`}\r\n//         />\r\n//         {errors.title && (\r\n//           <p className=\"mt-1 text-sm text-red-600\">{errors.title.message as string}</p>\r\n//         )}\r\n//       </div>\r\n\r\n//       <div>\r\n//         <label className=\"block text-sm font-medium text-gray-700\">Contenu *</label>\r\n//         <textarea\r\n//           {...register('content', { required: 'Le contenu est requis' })}\r\n//           rows={4}\r\n//           className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 ${\r\n//             errors.content ? 'border-red-500' : 'border'\r\n//           } p-2`}\r\n//         />\r\n//         {errors.content && (\r\n//           <p className=\"mt-1 text-sm text-red-600\">{errors.content.message as string}</p>\r\n//         )}\r\n//       </div>\r\n\r\n//       <div>\r\n//         <label className=\"block text-sm font-medium text-gray-700\">Auteur *</label>\r\n//         <input\r\n//           {...register('author', { required: \"L'auteur est requis\" })}\r\n//           className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 ${\r\n//             errors.author ? 'border-red-500' : 'border'\r\n//           } p-2`}\r\n//         />\r\n//         {errors.author && (\r\n//           <p className=\"mt-1 text-sm text-red-600\">{errors.author.message as string}</p>\r\n//         )}\r\n//       </div>\r\n\r\n//       <div>\r\n//         <label className=\"block text-sm font-medium text-gray-700\">Image</label>\r\n//         <input\r\n//           type=\"file\"\r\n//           id=\"image\"\r\n//           {...register('image')}\r\n//           accept=\"image/*\"\r\n//           onChange={handleImageChange}\r\n//           className=\"mt-1 block w-full text-sm text-gray-500\r\n//             file:mr-4 file:py-2 file:px-4\r\n//             file:rounded-md file:border-0\r\n//             file:text-sm file:font-semibold\r\n//             file:bg-blue-50 file:text-blue-700\r\n//             hover:file:bg-blue-100\"\r\n//         />\r\n//         {previewImage ? (\r\n//           <div className=\"mt-2\">\r\n//             <img \r\n//               src={previewImage} \r\n//               alt=\"Preview\" \r\n//               className=\"h-32 object-cover rounded\"\r\n//             />\r\n//           </div>\r\n//         ) : initialData?.imagePath ? (\r\n//           <div className=\"mt-2\">\r\n//             <img \r\n//               src={`http://localhost:3003${initialData.imagePath}`} \r\n//               alt=\"Current\" \r\n//               className=\"h-32 object-cover rounded\"\r\n//             />\r\n//           </div>\r\n//         ) : null}\r\n//       </div>\r\n\r\n//       <div className=\"pt-4\">\r\n//         <button\r\n//           type=\"submit\"\r\n//           disabled={isSubmitting}\r\n//           className=\"inline-flex justify-center rounded-md border border-transparent bg-blue-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50\"\r\n//         >\r\n//           {isSubmitting ? 'Modification...' : 'Modifier'}\r\n//         </button>\r\n//       </div>\r\n//     </form>\r\n//   );\r\n// }"],"names":[],"mappings":";;;;AACA;AACA;;;AAFA;;;AAIe,SAAS,aAAa,EAAE,EAAE,EAAkB;;IACzD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACrC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe;IAC9D,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,iCAAiC;IACjC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,MAAM,CAAC,gCAAgC,EAAE,IAAI,EAC1C,IAAI;0CAAC,CAAC,MAAQ,IAAI,IAAI;yCACtB,IAAI;0CAAC,CAAC;oBACL,SAAS,KAAK,KAAK;oBACnB,WAAW,KAAK,OAAO;oBACvB,UAAU,KAAK,MAAM;oBACrB,aAAa,KAAK,SAAS;gBAC7B;;QACJ;iCAAG;QAAC;KAAG;IAEP,8BAA8B;IAC9B,MAAM,eAAe,OAAO;QAC1B,MAAM,OAAO,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE;QAChC,IAAI,CAAC,MAAM;QAEX,MAAM,WAAW,IAAI;QACrB,SAAS,MAAM,CAAC,QAAQ;QAExB,MAAM,MAAM,MAAM,MAAM,0CAA0C;YAChE,QAAQ;YACR,MAAM;QACR;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,aAAa,KAAK,QAAQ;QAC1B,gBAAgB;IAClB;IAEA,2BAA2B;IAC3B,MAAM,eAAe;QACnB,MAAM,MAAM,CAAC,gCAAgC,EAAE,IAAI,EAAE;YACnD,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBACnB;gBACA;gBACA;gBACA;YACF;QACF;QAEA,MAAM;QACN,OAAO,IAAI,CAAC;IACd;IAEA,2BAA2B;IAC3B,MAAM,oBAAoB;QACxB,aAAa;IACf;IAEA,qBACE,6LAAC;;0BACC,6LAAC;0BAAG;;;;;;0BAEJ,6LAAC;gBACC,MAAK;gBACL,OAAO;gBACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;gBACxC,aAAY;;;;;;0BAEd,6LAAC;;;;;0BACD,6LAAC;gBACC,OAAO;gBACP,UAAU,CAAC,IAAM,WAAW,EAAE,MAAM,CAAC,KAAK;gBAC1C,aAAY;;;;;;0BAEd,6LAAC;;;;;0BACD,6LAAC;gBACC,MAAK;gBACL,OAAO;gBACP,UAAU,CAAC,IAAM,UAAU,EAAE,MAAM,CAAC,KAAK;gBACzC,aAAY;;;;;;0BAEd,6LAAC;;;;;YAEA,2BACC,6LAAC;;kCACC,6LAAC;wBACC,KAAK,CAAC,qBAAqB,EAAE,WAAW;wBACxC,KAAI;wBACJ,OAAO;;;;;;kCAET,6LAAC;;;;;kCACD,6LAAC;wBAAO,SAAS;kCAAmB;;;;;;;;;;;;0BAIxC,6LAAC;gBAAM,MAAK;gBAAO,UAAU;;;;;;0BAC7B,6LAAC;;;;;0BAED,6LAAC;gBAAO,SAAS;0BAAc;;;;;;;;;;;;AAGrC,EAKA,+CAA+C;CAE/C,yEAAyE;CACzE,iDAAiD;CACjD,4CAA4C;CAC5C,gDAAgD;CAChD,8CAA8C;CAC9C,yDAAyD;CAEzD,sBAAsB;CACtB,sCAAsC;CACtC,8EAA8E;CAC9E,uCAAuC;CACvC,uBAAuB;CACvB,8BAA8B;CAC9B,kCAAkC;CAClC,gCAAgC;CAChC,SAAS;CACT,mBAAmB;CACnB,kBAAkB;CAElB,2EAA2E;CAC3E,yDAAyD;CACzD,oCAAoC;CACpC,QAAQ;CACR,OAAO;CAEP,uCAAuC;CACvC,uCAAuC;CACvC,uCAAuC;CACvC,2CAA2C;CAC3C,yCAAyC;CACzC,kBAAkB;CAClB,uCAAuC;CACvC,QAAQ;CAER,iEAAiE;CACjE,uBAAuB;CACvB,wBAAwB;CACxB,UAAU;CAEV,8BAA8B;CAC9B,OAAO;CAEP,yCAAyC;CAEzC,aAAa;CACb,YAAY;CACZ,2BAA2B;CAC3B,+FAA+F;CAC/F,wGAAwG;CACxG,kGAAkG;CAClG,0DAA0D;CAC1D,4DAA4D;CAC5D,6BAA6B;CAC7B,gBAAgB;CAChB,kCAAkC;CAClC,yFAAyF;CACzF,iBAAiB;CACjB,WAAW;CACX,aAAa;CACb,OAAO;CACP,IAAI;CAMJ,gBAAgB;CAEhB,+CAA+C;CAC/C,+CAA+C;CAE/C,gCAAgC;CAChC,eAAe;CACf,IAAI;CAEJ,sEAAsE;CACtE,gCAAgC;CAChC,oDAAoD;CACpD,0DAA0D;CAC1D,2DAA2D;CAE3D,yDAAyD;CACzD,0BAA0B;CAE1B,uCAAuC;CACvC,uCAAuC;CACvC,2CAA2C;CAC3C,kDAAkD;CAElD,oFAAoF;CACpF,yBAAyB;CACzB,wBAAwB;CACxB,UAAU;CAEV,yBAAyB;CACzB,+BAA+B;CAC/B,eAAe;CACf,mDAAmD;CACnD,QAAQ;CACR,OAAO;CAEP,aAAa;CACb,sFAAsF;CACtF,uEAAuE;CAEvE,eAAe;CACf,sBAAsB;CACtB,wBAAwB;CACxB,qDAAqD;CACrD,8BAA8B;CAC9B,yCAAyC;CACzC,WAAW;CAEX,kBAAkB;CAClB,0BAA0B;CAC1B,uDAAuD;CACvD,gCAAgC;CAChC,yCAAyC;CACzC,WAAW;CAEX,eAAe;CACf,sBAAsB;CACtB,2BAA2B;CAC3B,kEAAkE;CAClE,yCAAyC;CACzC,WAAW;CAEX,oFAAoF;CACpF,wCAAwC;CACxC,kBAAkB;CAClB,cAAc;CACd,OAAO;CACP,IAAI;CAKJ,6CAA6C;CAC7C,oCAAoC;CAEpC,gCAAgC;CAChC,wCAAwC;CACxC,mBAAmB;CACnB,qBAAqB;CACrB,uBAAuB;CACvB,sBAAsB;CACtB,0BAA0B;CAC1B,OAAO;CACP,4BAA4B;CAC5B,IAAI;CAEJ,6GAA6G;CAC7G,wEAAwE;CACxE,sDAAsD;CACtD,QAAQ;CACR,2EAA2E;CAE3E,oDAAoD;CACpD,uCAAuC;CACvC,4CAA4C;CAC5C,gDAAgD;CAChD,8CAA8C;CAE9C,yCAAyC;CACzC,6CAA6C;CAC7C,iDAAiD;CACjD,0CAA0C;CAC1C,sEAAsE;CACtE,6DAA6D;CAC7D,QAAQ;CAER,0BAA0B;CAC1B,OAAO;CAEP,4EAA4E;CAC5E,wCAAwC;CACxC,kBAAkB;CAClB,yCAAyC;CACzC,mCAAmC;CACnC,oDAAoD;CACpD,WAAW;CACX,oCAAoC;CACpC,QAAQ;CACR,OAAO;CAEP,aAAa;CACb,+FAA+F;CAC/F,cAAc;CACd,qFAAqF;CACrF,iBAAiB;CACjB,wEAAwE;CACxE,4HAA4H;CAC5H,yDAAyD;CACzD,oBAAoB;CACpB,aAAa;CACb,6BAA6B;CAC7B,0FAA0F;CAC1F,aAAa;CACb,eAAe;CAEf,cAAc;CACd,uFAAuF;CACvF,oBAAoB;CACpB,4EAA4E;CAC5E,qBAAqB;CACrB,4HAA4H;CAC5H,2DAA2D;CAC3D,oBAAoB;CACpB,aAAa;CACb,+BAA+B;CAC/B,4FAA4F;CAC5F,aAAa;CACb,eAAe;CAEf,cAAc;CACd,sFAAsF;CACtF,iBAAiB;CACjB,yEAAyE;CACzE,4HAA4H;CAC5H,0DAA0D;CAC1D,oBAAoB;CACpB,aAAa;CACb,8BAA8B;CAC9B,2FAA2F;CAC3F,aAAa;CACb,eAAe;CAEf,cAAc;CACd,mFAAmF;CACnF,iBAAiB;CACjB,wBAAwB;CACxB,uBAAuB;CACvB,mCAAmC;CACnC,6BAA6B;CAC7B,yCAAyC;CACzC,+DAA+D;CAC/D,4CAA4C;CAC5C,4CAA4C;CAC5C,8CAA8C;CAC9C,iDAAiD;CACjD,sCAAsC;CACtC,aAAa;CACb,4BAA4B;CAC5B,mCAAmC;CACnC,oBAAoB;CACpB,oCAAoC;CACpC,+BAA+B;CAC/B,sDAAsD;CACtD,iBAAiB;CACjB,mBAAmB;CACnB,yCAAyC;CACzC,mCAAmC;CACnC,oBAAoB;CACpB,uEAAuE;CACvE,+BAA+B;CAC/B,sDAAsD;CACtD,iBAAiB;CACjB,mBAAmB;CACnB,oBAAoB;CACpB,eAAe;CAEf,+BAA+B;CAC/B,kBAAkB;CAClB,0BAA0B;CAC1B,oCAAoC;CACpC,qQAAqQ;CACrQ,YAAY;CACZ,4DAA4D;CAC5D,oBAAoB;CACpB,eAAe;CACf,cAAc;CACd,OAAO;CACP,IAAI;GA7XoB;;QAMP,qIAAA,CAAA,YAAS;;;KANF","debugId":null}}]
}