{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/komba/Gestion-contenu/FRONTEND/app/post/edit/%5Bid%5D/page.tsx"],"sourcesContent":["// import EditPostForm from \"../../../components/EditPostForm\";\n\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useParams, useRouter } from 'next/navigation';\n\nexport default function EditPostPage() {\n  const { id } = useParams();\n  const router = useRouter();\n\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [author, setAuthor] = useState('');\n  const [imagePath, setImagePath] = useState('');\n  const [newImageFile, setNewImageFile] = useState<File | null>(null);\n\n  useEffect(() => {\n    fetch(`http://localhost:3003/api/posts/${id}`)\n      .then(res => res.json())\n      .then(data => {\n        setTitle(data.title);\n        setContent(data.content);\n        setAuthor(data.author);\n        setImagePath(data.imagePath);\n      });\n  }, [id]);\n\n  const handleUpload = async (file: File) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const res = await fetch('http://localhost:3003/api/files/upload', {\n      method: 'POST',\n      body: formData,\n    });\n    const data = await res.json();\n    return data.filePath;\n  };\n\n  const handleDeleteImage = () => {\n    setImagePath('');\n  };\n\n  const handleSubmit = async () => {\n    let finalImagePath = imagePath;\n\n    if (newImageFile) {\n      finalImagePath = await handleUpload(newImageFile);\n    }\n\n    await fetch(`http://localhost:3003/api/posts/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ title, content, author, imagePath: finalImagePath }),\n    });\n\n    alert('Post updated!');\n    router.push('/post');\n  };\n\n  return (\n    <div>\n      <h2>Modifier le post</h2>\n      <input value={title} onChange={e => setTitle(e.target.value)} placeholder=\"Title\" />\n      <textarea value={content} onChange={e => setContent(e.target.value)} placeholder=\"Content\" />\n      <input value={author} onChange={e => setAuthor(e.target.value)} placeholder=\"Author\" />\n\n      {imagePath && (\n        <div>\n          <img src={`http://localhost:3003${imagePath}`} alt=\"current\" width={200} />\n          <button onClick={handleDeleteImage}>Supprimer l’image existante</button>\n        </div>\n      )}\n\n      <input\n        type=\"file\"\n        onChange={(e) => {\n          if (e.target.files?.[0]) {\n            setNewImageFile(e.target.files[0]);\n          }\n        }}\n      />\n\n      <button onClick={handleSubmit}>Sauvegarder les modifications</button>\n    </div>\n  );\n}\n\n\n// async function getPost(id: string) {\n//   const res = await fetch(`http://localhost:3003/api/posts/${id}`, {\n//     cache: \"no-store\",\n//   });\n\n//   if (!res.ok) {\n//     throw new Error(\"Erreur lors de la récupération du post\");\n//   }\n\n//   return res.json();\n// }\n\n// export default async function EditPostPage({ params }: { params: { id: string } }) {\n//   // const post = await getPost(params.id);\n\n//   return ( \n//   <div> \n//     <EditPostForm postId={params.id} />\n//   </div>\n//   );\n// }\n\n\n\n// 'use client';\n\n// import { useRouter, useParams } from 'next/navigation';\n// import { useState, useEffect } from 'react';\n// import { getPost, updatePost } from '../../service/api';\n// import EditPostForm from '@/app/components/EditPostForm';\n// import Link from 'next/link';\n\n// export default function EditPostPage() {\n//   const router = useRouter();\n//   const { id } = useParams();\n//   const postId = Array.isArray(id) ? id[0] : id;\n//   const [post, setPost] = useState<any>(null);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n//   const [error, setError] = useState<string | null>(null);\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   const fetchPost = async () => {\n//     if (!postId) return;\n//     try {\n//       setIsLoading(true);\n//       const response = await getPost(postId);\n//       setPost(response.data);\n//     } catch (err) {\n//       setError('Erreur lors du chargement du post');\n//       console.error(err);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const onSubmit = async (formData: FormData) => {\n//     try {\n//       setIsSubmitting(true);\n//       setError(null);\n//       await updatePost(id as string, formData);\n//       router.push('/post');\n//     } catch (err) {\n//       setError('Erreur lors de la mise à jour du post');\n//       console.error(err);\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPost();\n//   }, [id]);\n\n//   if (isLoading) {\n//     return (\n//       <div className=\"flex justify-center items-center h-64\">\n//         <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\n//       </div>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n//         <strong className=\"font-bold\">Erreur ! </strong>\n//         <span className=\"block sm:inline\">{error}</span>\n//       </div>\n//     );\n//   }\n\n//   if (!post) {\n//     return (\n//       <div className=\"bg-white p-8 rounded-lg shadow text-center\">\n//         <p className=\"text-gray-500\">Post non trouvé</p>\n//         <Link \n//           href=\"/posts\"\n//           className=\"inline-block mt-4 text-blue-600 hover:text-blue-800\"\n//         >\n//           Retour à la liste\n//         </Link>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"container mx-auto px-4 py-8\">\n//       <div className=\"mb-8\">\n//         <h1 className=\"text-3xl font-bold text-gray-800\">Modifier le Post</h1>\n//         <p className=\"text-gray-600 mt-2\">Modifiez les champs nécessaires</p>\n//       </div>\n\n//       {error && (\n//         <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6\">\n//           {error}\n//         </div>\n//       )}\n\n//       <EditPostForm onSubmit={onSubmit} initialData={post} isSubmitting={isSubmitting} />\n//     </div>\n//   );\n// }\n\n\n\n\n\n// import { useRouter } from 'next/router';\n// import { useState, useEffect } from 'react';\n// import { getPost, updatePost } from '../../service/api';\n// import PostForm from '@/app/components/PostForm';\n\n// export default function EditPostPage() {\n//   const router = useRouter();\n//   const { id } = router.query;\n//   const [post, setPost] = useState<any>(null);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n//   const [error, setError] = useState<string | null>(null);\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   const fetchPost = async () => {\n//     if (!id) return;\n//     try {\n//       setIsLoading(true);\n//       const response = await getPost(id as string);\n//       setPost(response.data);\n//     } catch (err) {\n//       setError('Erreur lors du chargement du post');\n//       console.error(err);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const onSubmit = async (data: any) => {\n//     try {\n//       setIsSubmitting(true);\n//       setError(null);\n//       await updatePost(id as string, data);\n//       router.push('/posts');\n//     } catch (err) {\n//       setError('Erreur lors de la mise à jour du post');\n//       console.error(err);\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchPost();\n//   }, [id]);\n\n//   if (isLoading) return <div className=\"text-center py-8\">Chargement...</div>;\n//   if (error) return <div className=\"text-center py-8 text-red-500\">{error}</div>;\n//   if (!post) return <div className=\"text-center py-8\">Post non trouvé</div>;\n\n//   return (\n//     <div className=\"container mx-auto px-4 py-8\">\n//       <div className=\"flex items-center mb-6\">\n//         <h1 className=\"text-2xl font-bold\">Modifier le Post</h1>\n//       </div>\n\n//       {error && (\n//         <div className=\"mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded\">\n//           {error}\n//         </div>\n//       )}\n\n//       <PostForm onSubmit={onSubmit} initialData={post} isSubmitting={isSubmitting} />\n//     </div>\n//   );\n// }\n// \"use client\"\n// import React, {useState,useEffect } from 'react'\n// import { useRouter } from 'next/navigation'\n// import { fetcher } from '@/app/libs'\n// import useSWR from 'swr'\n// export default function PostEdit({params} :{params:{id:number}}) {\n//   const router = useRouter()\n//   const {data : post,isLoading, error} = useSWR(`/api/posts/${params.id}`,fetcher)\n//   const [title, setTitle] =useState<string>('');\n//   const [body, setBody] = useState<string>('');\n//   useEffect(()=>{\n//      if(post){\n//          setTitle(post.result.title)\n//          setBody(post.result.content)\n//      }\n//   },[post, isLoading])\n//   const updatePost = async (e: any) => {\n//     e.preventDefault()\n//     if (title!=\"\" && body!=\"\") {\n//       const formData = {\n//           title: title,\n//           content: body\n//       }\n//       const res = await fetch(`/api/posts/${params.id}`, {\n//         method: 'PUT',\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(formData)\n//       });\n//       const content = await res.json();\n//       if(content.success>0)\n//       {\n//         router.push('/post');\n//       }\n      \n//     }\n//   };\n//   if(isLoading) return <div><span>Loading...</span></div>\n//   if (!post) return null;\n//   return (\n//     <form className='w-full' onSubmit={updatePost}>\n//         <span className='font-bold text-yellow-500 py-2 block underline text-2xl'>Form Add</span>\n//         <div className='w-full py-2'>\n//              <label htmlFor=\"\" className='text-sm font-bold py-2 block'>Title</label>\n//              <input type='text' name='title' className='w-full border-[1px] border-gray-200 p-2 rounded-sm' value={title} onChange={(e:any)=>setTitle(e.target.value)}/>\n//         </div>\n//         <div className='w-full py-2'>\n//              <label htmlFor=\"\" className='text-sm font-bold py-2 block'>Content</label>\n//              <textarea name='title' className='w-full border-[1px] border-gray-200 p-2 rounded-sm' value={body} onChange={(e:any)=>setBody(e.target.value)} />\n//         </div>\n//         <div className='w-full py-2'>\n//           <button className=\"w-20 p-2 text-white border-gray-200 border-[1px] rounded-sm bg-green-400\">Submit</button>\n//         </div>\n//     </form>\n//   )\n// }\n"],"names":[],"mappings":"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","debugId":null}}]
}